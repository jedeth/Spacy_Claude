#!/usr/bin/env python3
"""
Lanceur pour la version stable du Pseudonymiseur
√âvite tous les probl√®mes de threading
"""

import sys
import os
import subprocess
import tkinter as tk
from tkinter import messagebox
from pathlib import Path

def check_spacy():
    """V√©rifie spaCy rapidement"""
    try:
        import spacy
        
        # Test des mod√®les
        models = ["fr_core_news_md", "fr_core_news_sm"]
        for model in models:
            try:
                nlp = spacy.load(model)
                print(f"‚úÖ Mod√®le {model} disponible")
                return True
            except OSError:
                continue
        
        print("‚ö†Ô∏è  Aucun mod√®le fran√ßais trouv√©")
        return False
        
    except ImportError:
        print("‚ùå spaCy non install√©")
        return False

def install_spacy_simple():
    """Installation simple de spaCy"""
    try:
        print("üì¶ Installation de spaCy...")
        subprocess.run([sys.executable, "-m", "pip", "install", "spacy"], check=True, capture_output=True)
        
        print("üì• T√©l√©chargement du mod√®le...")
        subprocess.run([sys.executable, "-m", "spacy", "download", "fr_core_news_md"], check=True, capture_output=True)
        
        return True
    except subprocess.CalledProcessError:
        try:
            # Essai avec le mod√®le plus petit
            subprocess.run([sys.executable, "-m", "spacy", "download", "fr_core_news_sm"], check=True, capture_output=True)
            return True
        except subprocess.CalledProcessError:
            return False

def launch_app():
    """Lance l'application stable"""
    try:
        print("üöÄ Lancement de la version stable...")
        
        # V√©rification des fichiers
        required_files = ["pseudonymizer_simple.py"]
        missing = [f for f in required_files if not Path(f).exists()]
        
        if missing:
            print(f"‚ùå Fichiers manquants : {missing}")
            return False
        
        # Lancement direct
        import pseudonymizer_simple
        pseudonymizer_simple.main()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur : {e}")
        return False

def main():
    """Fonction principale"""
    print("=" * 50)
    print("üîí PSEUDONYMISEUR - VERSION STABLE")
    print("=" * 50)
    
    # V√©rification spaCy
    if not check_spacy():
        print("\nüí° Installation de spaCy requise...")
        
        if install_spacy_simple():
            print("‚úÖ Installation r√©ussie")
        else:
            print("‚ùå Installation √©chou√©e")
            print("\nInstallez manuellement :")
            print("pip install spacy")
            print("python -m spacy download fr_core_news_md")
            input("Appuyez sur Entr√©e...")
            return
    
    print("‚úÖ spaCy configur√©")
    
    # Lancement
    if launch_app():
        print("‚úÖ Application ferm√©e normalement")
    else:
        print("‚ùå Erreur de lancement")
        input("Appuyez sur Entr√©e...")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã Arr√™t par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur critique : {e}")
        input("Appuyez sur Entr√©e...")