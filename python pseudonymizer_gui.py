#!/usr/bin/env python3
"""
Script d'installation automatique pour le Pseudonymiseur de Textes
Installe toutes les d√©pendances n√©cessaires
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, description):
    """Ex√©cute une commande et affiche le r√©sultat"""
    print(f"üì¶ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - Succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - Erreur: {e}")
        print(f"Sortie d'erreur: {e.stderr}")
        return False

def check_python_version():
    """V√©rifie la version de Python"""
    version = sys.version_info
    print(f"üêç Version Python d√©tect√©e: {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8+ requis. Veuillez mettre √† jour Python.")
        return False
    
    print("‚úÖ Version Python compatible")
    return True

def install_dependencies():
    """Installe les d√©pendances Python"""
    dependencies = [
        "spacy>=3.4.0",
        "spacy[lookups]"
    ]
    
    for dep in dependencies:
        if not run_command(f"{sys.executable} -m pip install {dep}", f"Installation de {dep}"):
            return False
    
    return True

def download_spacy_models():
    """T√©l√©charge les mod√®les spaCy fran√ßais"""
    models = [
        ("fr_core_news_sm", "Mod√®le fran√ßais petit (rapide)"),
        ("fr_core_news_md", "Mod√®le fran√ßais moyen (recommand√©)"),
        ("fr_core_news_lg", "Mod√®le fran√ßais large (plus pr√©cis)")
    ]
    
    success_count = 0
    
    for model, description in models:
        print(f"üì• T√©l√©chargement {description}...")
        if run_command(f"{sys.executable} -m spacy download {model}", f"T√©l√©chargement {model}"):
            success_count += 1
        else:
            print(f"‚ö†Ô∏è  √âchec du t√©l√©chargement de {model} (peut √™tre ignor√©)")
    
    if success_count > 0:
        print(f"‚úÖ {success_count} mod√®le(s) install√©(s) avec succ√®s")
        return True
    else:
        print("‚ùå Aucun mod√®le install√©")
        return False

def test_installation():
    """Teste l'installation"""
    print("üß™ Test de l'installation...")
    
    try:
        import spacy
        print("‚úÖ spaCy import√© avec succ√®s")
        
        # Test des mod√®les
        models_to_test = ["fr_core_news_sm", "fr_core_news_md", "fr_core_news_lg"]
        working_models = []
        
        for model in models_to_test:
            try:
                nlp = spacy.load(model)
                working_models.append(model)
                print(f"‚úÖ Mod√®le {model} fonctionnel")
            except OSError:
                print(f"‚ö†Ô∏è  Mod√®le {model} non disponible")
        
        if working_models:
            print(f"‚úÖ {len(working_models)} mod√®le(s) pr√™t(s) √† l'utilisation")
            
            # Test rapide de pseudonymisation
            best_model = working_models[-1]  # Prendre le meilleur disponible
            nlp = spacy.load(best_model)
            doc = nlp("Jean Dupont travaille chez Microsoft √† Paris.")
            entities = [(ent.text, ent.label_) for ent in doc.ents]
            
            if entities:
                print(f"‚úÖ Test de reconnaissance d'entit√©s r√©ussi: {entities}")
            else:
                print("‚ö†Ô∏è  Test de reconnaissance d'entit√©s: aucune entit√© d√©tect√©e")
            
            return True
        else:
            print("‚ùå Aucun mod√®le fonctionnel")
            return False
            
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False

def create_example_files():
    """Cr√©e des fichiers d'exemple pour le fine-tuning"""
    print("üìÑ Cr√©ation des fichiers d'exemple...")
    
    # Exemple d'annuaire
    annuaire_example = """Jean Dupont
Marie Martin
Pierre Durand
Sophie Leclerc
Antoine Bernard
Camille Rousseau
Lucas Moreau
Emma Fournier
Hugo Girard
L√©a Mercier"""
    
    # Exemple de contextes
    contextes_example = """{PERSON} travaille chez {ORG} depuis janvier 2020.
L'entreprise {ORG} est situ√©e √† {LOC}.
{PERSON} de {LOC} contacte {PERSON} par email.
{PERSON} est responsable marketing chez {ORG}.
La soci√©t√© {ORG} bas√©e √† {LOC} recrute.
{PERSON} habite √† {LOC} et travaille pour {ORG}.
{PERSON} a rejoint {ORG} en tant que consultant.
L'√©quipe de {ORG} √† {LOC} se d√©veloppe.
{PERSON} g√®re le bureau de {ORG} √† {LOC}.
{PERSON} collabore avec {PERSON} sur le projet {ORG}."""
    
    # Exemple de texte √† traiter
    texte_example = """Jean Dupont travaille chez Microsoft France depuis le 15 janvier 2020. 
Il habite √† Paris dans le 15√®me arrondissement et son email professionnel est jean.dupont@microsoft.com. 
Son t√©l√©phone portable est le 06.12.34.56.78.

Il collabore r√©guli√®rement avec Marie Martin de Google France, bas√©e √† Lyon. 
Marie peut √™tre jointe au 04.78.90.12.34 ou par email √† marie.martin@google.fr.

Leur prochaine r√©union est pr√©vue le 25 d√©cembre 2024 dans les bureaux d'Amazon √† Toulouse.
Le contact local est Pierre Durand (pierre.durand@amazon.fr)."""
    
    try:
        # Cr√©ation du dossier exemples
        examples_dir = Path("exemples_finetuning")
        examples_dir.mkdir(exist_ok=True)
        
        # Sauvegarde des fichiers
        (examples_dir / "annuaire_personnes.txt").write_text(annuaire_example, encoding='utf-8')
        (examples_dir / "contextes_phrases.txt").write_text(contextes_example, encoding='utf-8')
        (examples_dir / "texte_test.txt").write_text(texte_example, encoding='utf-8')
        
        print(f"‚úÖ Fichiers d'exemple cr√©√©s dans le dossier '{examples_dir}'")
        print("   - annuaire_personnes.txt : Exemple d'annuaire")
        print("   - contextes_phrases.txt : Phrases avec placeholders")
        print("   - texte_test.txt : Texte d'exemple √† pseudonymiser")
        
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur lors de la cr√©ation des exemples: {e}")
        return False

def main():
    """Fonction principale d'installation"""
    print("=" * 60)
    print("üöÄ INSTALLATION DU PSEUDONYMISEUR DE TEXTES")
    print("=" * 60)
    
    # V√©rifications pr√©liminaires
    if not check_python_version():
        sys.exit(1)
    
    print("\n" + "=" * 60)
    print("üì¶ INSTALLATION DES D√âPENDANCES")
    print("=" * 60)
    
    # Installation des d√©pendances
    if not install_dependencies():
        print("‚ùå √âchec de l'installation des d√©pendances")
        sys.exit(1)
    
    print("\n" + "=" * 60)
    print("üì• T√âL√âCHARGEMENT DES MOD√àLES")
    print("=" * 60)
    
    # T√©l√©chargement des mod√®les
    if not download_spacy_models():
        print("‚ùå √âchec du t√©l√©chargement des mod√®les")
        sys.exit(1)
    
    print("\n" + "=" * 60)
    print("üß™ TESTS DE VALIDATION")
    print("=" * 60)
    
    # Tests
    if not test_installation():
        print("‚ùå Les tests ont √©chou√©")
        sys.exit(1)
    
    print("\n" + "=" * 60)
    print("üìÑ CR√âATION DES EXEMPLES")
    print("=" * 60)
    
    # Cr√©ation des exemples
    create_example_files()
    
    print("\n" + "=" * 60)
    print("üéâ INSTALLATION TERMIN√âE AVEC SUCC√àS!")
    print("=" * 60)
    
    print("\nüìã PROCHAINES √âTAPES:")
    print("1. Lancez l'application: python pseudonymizer_gui.py")
    print("2. Pour le fine-tuning, utilisez les fichiers dans 'exemples_finetuning/'")
    print("3. Consultez la documentation pour plus d'informations")
    
    print("\nüí° CONSEILS:")
    print("- Utilisez fr_core_news_md pour un bon √©quilibre vitesse/pr√©cision")
    print("- Le fine-tuning am√©liore significativement les r√©sultats")
    print("- Testez d'abord avec le fichier texte_test.txt")

if __name__ == "__main__":
    main()