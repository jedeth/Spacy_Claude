def select_directory_file(self):
        try:
            file_path = filedialog.askopenfilename(
                title="Fichier annuaire",
                filetypes=[("Fichiers texte", "*.txt"), ("Tous", "*.*")]
            )
            if file_path:
                self.directory_file.set(file_path)
                print(f"üìÅ Fichier annuaire s√©lectionn√© : {file_path}")
        except Exception as e:
            print(f"‚ùå Erreur s√©lection fichier annuaire : {e}")
            messagebox.showerror("Erreur", f"Erreur lors de la s√©lection : {str(e)}")
import spacy 
from spacy.training import Example
import random
import json
import os
from pathlib import Path
from typing import List, Dict, Tuple, Optional
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import threading
from datetime import datetime

class DataGenerator:
    """G√©n√©rateur de donn√©es d'entra√Ænement √† partir d'annuaire et de contextes"""
    
    def __init__(self):
        self.person_names = []
        self.org_names = []
        self.location_names = []
        self.context_templates = []
        self.generated_data = []
    
    def load_directory_file(self, file_path: str, entity_type: str = "PERSON"):
        """Charge un fichier annuaire"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                names = [line.strip() for line in f if line.strip()]
            
            if entity_type == "PERSON":
                self.person_names.extend(names)
            elif entity_type == "ORG":
                self.org_names.extend(names)
            elif entity_type == "LOC":
                self.location_names.extend(names)
            
            return len(names)
        except Exception as e:
            raise Exception(f"Erreur lors du chargement de l'annuaire : {str(e)}")
    
    def load_context_templates(self, file_path: str):
        """Charge des phrases contextuelles avec des placeholders"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                templates = [line.strip() for line in f if line.strip()]
            
            self.context_templates = templates
            return len(templates)
        except Exception as e:
            raise Exception(f"Erreur lors du chargement des contextes : {str(e)}")
    
    def generate_training_data(self, num_samples: int = 1000) -> List[Tuple[str, Dict]]:
        """G√©n√®re des donn√©es d'entra√Ænement annot√©es"""
        if not self.context_templates:
            raise Exception("Aucun template de contexte charg√©")
        
        training_data = []
        
        for _ in range(num_samples):
            template = random.choice(self.context_templates)
            text = template
            entities = []
            
            # Traitement s√©quentiel des placeholders
            current_text = text
            current_entities = []
            
            # Traitement des PERSON
            while "{PERSON}" in current_text and self.person_names:
                person = random.choice(self.person_names)
                pos = current_text.find("{PERSON}")
                if pos != -1:
                    # Ajout de l'entit√© avec la position actuelle
                    current_entities.append((pos, pos + len(person), "PERSON"))
                    # Remplacement dans le texte
                    current_text = current_text.replace("{PERSON}", person, 1)
            
            # Traitement des ORG
            while "{ORG}" in current_text and self.org_names:
                org = random.choice(self.org_names)
                pos = current_text.find("{ORG}")
                if pos != -1:
                    current_entities.append((pos, pos + len(org), "ORG"))
                    current_text = current_text.replace("{ORG}", org, 1)
            
            # Traitement des LOC
            while "{LOC}" in current_text and self.location_names:
                loc = random.choice(self.location_names)
                pos = current_text.find("{LOC}")
                if pos != -1:
                    current_entities.append((pos, pos + len(loc), "LOC"))
                    current_text = current_text.replace("{LOC}", loc, 1)
            
            # Validation : pas de placeholders restants
            if not any(placeholder in current_text for placeholder in ["{PERSON}", "{ORG}", "{LOC}"]):
                if current_entities:
                    # Tri des entit√©s par position
                    current_entities.sort(key=lambda x: x[0])
                    annotation = {"entities": current_entities}
                    training_data.append((current_text, annotation))
        
        self.generated_data = training_data
        return training_data
    
    def save_training_data(self, output_path: str):
        """Sauvegarde les donn√©es d'entra√Ænement au format JSON"""
        data_for_export = []
        for text, annotation in self.generated_data:
            data_for_export.append({
                "text": text,
                "entities": annotation["entities"]
            })
        
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(data_for_export, f, ensure_ascii=False, indent=2)

class SpacyFineTuner:
    """Fine-tuner pour mod√®les spaCy simplifi√©"""
    
    def __init__(self, base_model: str = "fr_core_news_md"):
        self.base_model = base_model
        self.nlp = None
        self.training_data = []
    
    def load_base_model(self):
        """Charge le mod√®le de base"""
        try:
            self.nlp = spacy.load(self.base_model)
            
            # V√©rification de la version de spaCy
            spacy_version = getattr(spacy, '__version__', 'inconnue')
            print(f"Version spaCy d√©tect√©e : {spacy_version}")
            
            if "ner" not in self.nlp.pipe_names:
                ner = self.nlp.add_pipe("ner", last=True)
            else:
                ner = self.nlp.get_pipe("ner")
            
            return True
        except OSError:
            raise Exception(f"Mod√®le {self.base_model} non trouv√©. Installez-le avec : python -m spacy download {self.base_model}")
        except Exception as e:
            # Essai avec le mod√®le plus petit si le principal √©choue
            try:
                self.base_model = "fr_core_news_sm"
                self.nlp = spacy.load(self.base_model)
                if "ner" not in self.nlp.pipe_names:
                    ner = self.nlp.add_pipe("ner", last=True)
                print(f"Utilisation du mod√®le de fallback : {self.base_model}")
                return True
            except:
                raise Exception(f"Aucun mod√®le fran√ßais trouv√©. Installez avec : python -m spacy download fr_core_news_md")
    
    def prepare_training_data(self, training_data: List[Tuple[str, Dict]]):
        """Pr√©pare les donn√©es pour l'entra√Ænement spaCy"""
        if not self.nlp:
            self.load_base_model()
        
        examples = []
        
        # R√©cup√©ration du composant NER avec gestion d'erreur
        try:
            ner = self.nlp.get_pipe("ner")
        except KeyError:
            # Si pas de NER, on l'ajoute
            ner = self.nlp.add_pipe("ner", last=True)
        
        # Ajout des nouvelles labels
        for text, annotation in training_data:
            for start, end, label in annotation["entities"]:
                ner.add_label(label)
        
        # Cr√©ation des exemples d'entra√Ænement
        for text, annotation in training_data:
            try:
                doc = self.nlp.make_doc(text)
                example = Example.from_dict(doc, annotation)
                examples.append(example)
            except Exception as e:
                print(f"Erreur lors de la cr√©ation de l'exemple : {text[:50]}... - {e}")
                continue
        
        self.training_data = examples
        return len(examples)
    
    def fine_tune(self, n_iter: int = 30, drop_rate: float = 0.2, progress_callback=None):
        """Fine-tune le mod√®le avec compatibilit√© multi-versions"""
        if not self.training_data:
            raise Exception("Aucune donn√©e d'entra√Ænement pr√©par√©e")
        
        # R√©cup√©ration des pipes √† d√©sactiver (compatibilit√© version)
        try:
            all_pipes = list(self.nlp.pipe_names)
            other_pipes = [pipe for pipe in all_pipes if pipe != "ner"]
        except AttributeError:
            # Version plus ancienne de spaCy
            other_pipes = [pipe for pipe in self.nlp.pipeline if pipe[0] != "ner"]
            other_pipes = [pipe[0] if isinstance(pipe, tuple) else pipe for pipe in other_pipes]
        
        print(f"Pipes √† d√©sactiver : {other_pipes}")
        
        # Gestion des diff√©rentes versions de spaCy
        try:
            # spaCy v3+
            unaffected_pipes = [pipe for pipe in self.nlp.pipe_names if pipe not in other_pipes]
            with self.nlp.select_pipes(enable=["ner"]):
                optimizer = self.nlp.initialize()
                self._run_training_loop(n_iter, drop_rate, progress_callback, optimizer)
        except (AttributeError, TypeError):
            try:
                # spaCy v2 style
                with self.nlp.disable_pipes(*other_pipes):
                    optimizer = self.nlp.resume_training()
                    self._run_training_loop(n_iter, drop_rate, progress_callback, optimizer)
            except:
                # Fallback : entra√Ænement simple sans d√©sactiver les pipes
                print("Attention : entra√Ænement sans d√©sactivation des pipes")
                optimizer = self.nlp.initialize() if hasattr(self.nlp, 'initialize') else None
                self._run_training_loop(n_iter, drop_rate, progress_callback, optimizer)
        
        return True
    
    def _run_training_loop(self, n_iter: int, drop_rate: float, progress_callback, optimizer):
        """Boucle d'entra√Ænement s√©par√©e pour r√©utilisation"""
        for iteration in range(n_iter):
            if progress_callback:
                progress_callback(iteration, n_iter)
            
            random.shuffle(self.training_data)
            losses = {}
            
            # Traitement par petits batches
            batch_size = min(8, len(self.training_data))
            for i in range(0, len(self.training_data), batch_size):
                batch = self.training_data[i:i + batch_size]
                try:
                    if optimizer:
                        self.nlp.update(batch, drop=drop_rate, losses=losses, sgd=optimizer)
                    else:
                        self.nlp.update(batch, drop=drop_rate, losses=losses)
                except Exception as e:
                    print(f"Erreur lors de la mise √† jour batch {i//batch_size}: {e}")
                    continue
            
            # Log p√©riodique
            if iteration % 5 == 0:
                print(f"Iteration {iteration}, Losses: {losses}")
    
    def save_model(self, output_path: str):
        """Sauvegarde le mod√®le fine-tun√©"""
        if not self.nlp:
            raise Exception("Aucun mod√®le √† sauvegarder")
        
        Path(output_path).mkdir(parents=True, exist_ok=True)
        self.nlp.to_disk(output_path)
        
        # M√©tadonn√©es avec gestion d'erreur
        try:
            ner = self.nlp.get_pipe("ner")
            entities_trained = list(ner.labels) if hasattr(ner, 'labels') else []
        except:
            entities_trained = ["PERSON", "ORG", "LOC"]  # Valeurs par d√©faut
        
        metadata = {
            "base_model": self.base_model,
            "training_samples": len(self.training_data),
            "fine_tuned_date": datetime.now().isoformat(),
            "entities_trained": entities_trained,
            "spacy_version": spacy.__version__
        }
        
        with open(Path(output_path) / "fine_tune_metadata.json", 'w', encoding='utf-8') as f:
            json.dump(metadata, f, ensure_ascii=False, indent=2)

class FineTuningGUI:
    """Interface graphique pour le fine-tuning - Version thread-safe simplifi√©e"""
    
    def __init__(self, parent_window=None):
        self.window = tk.Toplevel(parent_window) if parent_window else tk.Tk()
        self.window.title("Fine-tuning du mod√®le spaCy")
        self.window.geometry("700x850")  # Augment√© pour le nouveau contenu
        
        self.data_generator = DataGenerator()
        self.fine_tuner = None  # Sera initialis√© selon le mod√®le choisi
        
        # Variables
        self.directory_file = tk.StringVar()
        self.context_file = tk.StringVar()
        self.output_model_path = tk.StringVar()
        self.status_text = tk.StringVar(value="Pr√™t pour le fine-tuning")
        self.entity_type = tk.StringVar(value="PERSON")
        
        # Variables pour les param√®tres
        self.num_samples = tk.IntVar(value=100)
        self.n_iterations = tk.IntVar(value=10)
        
        # Variable pour le choix du mod√®le de base
        self.base_model = tk.StringVar(value="fr_core_news_md")
        
        self.create_widgets()
    
    def create_widgets(self):
        """Cr√©ation de l'interface"""
        
        # Titre
        ttk.Label(self.window, text="Fine-tuning du mod√®le spaCy", 
                 font=('Arial', 16, 'bold')).pack(pady=15)
        
        # Section 0: Choix du mod√®le de base
        model_frame = ttk.LabelFrame(self.window, text="0. Mod√®le de base spaCy", padding=10)
        model_frame.pack(fill='x', padx=20, pady=10)
        
        ttk.Label(model_frame, text="Choisissez le mod√®le spaCy √† utiliser comme base :").pack(anchor='w')
        
        model_options_frame = ttk.Frame(model_frame)
        model_options_frame.pack(fill='x', pady=5)
        
        ttk.Radiobutton(model_options_frame, text="fr_core_news_sm (50 MB - Rapide)", 
                       variable=self.base_model, value="fr_core_news_sm").pack(anchor='w')
        ttk.Radiobutton(model_options_frame, text="fr_core_news_md (45 MB - √âquilibr√©)", 
                       variable=self.base_model, value="fr_core_news_md").pack(anchor='w')
        ttk.Radiobutton(model_options_frame, text="fr_core_news_lg (560 MB - Pr√©cis)", 
                       variable=self.base_model, value="fr_core_news_lg").pack(anchor='w')
        
        model_info = """üí° Conseils de choix :
‚Ä¢ sm : Rapide, moins pr√©cis, id√©al pour les tests
‚Ä¢ md : Bon compromis vitesse/pr√©cision (recommand√©)
‚Ä¢ lg : Plus pr√©cis mais plus lent et volumineux"""
        
        ttk.Label(model_frame, text=model_info, justify='left', 
                 foreground='gray').pack(anchor='w', pady=(5,0))
        
        ttk.Button(model_frame, text="V√©rifier/T√©l√©charger le mod√®le", 
                  command=self.check_download_model).pack(pady=10)
        
        # Section 1: Fichier annuaire
        directory_frame = ttk.LabelFrame(self.window, text="1. Fichier annuaire", padding=10)
        directory_frame.pack(fill='x', padx=20, pady=10)
        
        ttk.Label(directory_frame, text="S√©lectionnez votre fichier annuaire (un nom par ligne) :").pack(anchor='w')
        
        dir_select_frame = ttk.Frame(directory_frame)
        dir_select_frame.pack(fill='x', pady=5)
        
        self.directory_entry = ttk.Entry(dir_select_frame, textvariable=self.directory_file, 
                 state='readonly', width=50)
        self.directory_entry.pack(side='left', fill='x', expand=True)
        ttk.Button(dir_select_frame, text="Parcourir...", 
                  command=self.select_directory_file).pack(side='right', padx=(5,0))
        
        # Type d'entit√©
        ttk.Label(directory_frame, text="Type d'entit√©s dans ce fichier :").pack(anchor='w', pady=(10,0))
        entity_frame = ttk.Frame(directory_frame)
        entity_frame.pack(fill='x')
        
        ttk.Radiobutton(entity_frame, text="Personnes", variable=self.entity_type, 
                       value="PERSON").pack(side='left')
        ttk.Radiobutton(entity_frame, text="Organisations", variable=self.entity_type, 
                       value="ORG").pack(side='left', padx=(20,0))
        ttk.Radiobutton(entity_frame, text="Lieux", variable=self.entity_type, 
                       value="LOC").pack(side='left', padx=(20,0))
        
        ttk.Button(directory_frame, text="Charger l'annuaire", 
                  command=self.load_directory).pack(pady=10)
        
        # Section 2: Phrases contextuelles
        context_frame = ttk.LabelFrame(self.window, text="2. Phrases contextuelles", padding=10)
        context_frame.pack(fill='x', padx=20, pady=10)
        
        context_help = """Cr√©ez des phrases avec des placeholders :
{PERSON} travaille chez {ORG} depuis janvier.
L'entreprise {ORG} est bas√©e √† {LOC}.
{PERSON} de {LOC} contacte {PERSON} par email."""
        
        ttk.Label(context_frame, text=context_help, justify='left').pack(anchor='w')
        
        ctx_select_frame = ttk.Frame(context_frame)
        ctx_select_frame.pack(fill='x', pady=5)
        
        self.context_entry = ttk.Entry(ctx_select_frame, textvariable=self.context_file, 
                 state='readonly', width=50)
        self.context_entry.pack(side='left', fill='x', expand=True)
        ttk.Button(ctx_select_frame, text="Parcourir...", 
                  command=self.select_context_file).pack(side='right', padx=(5,0))
        
        ttk.Button(context_frame, text="Charger les contextes", 
                  command=self.load_contexts).pack(pady=10)
        
        # Section 3: G√©n√©ration et entra√Ænement
        training_frame = ttk.LabelFrame(self.window, text="3. Entra√Ænement", padding=10)
        training_frame.pack(fill='x', padx=20, pady=10)
        
        # Param√®tres
        params_frame = ttk.Frame(training_frame)
        params_frame.pack(fill='x', pady=5)
        
        ttk.Label(params_frame, text="Nombre d'exemples √† g√©n√©rer :").pack(side='left')
        ttk.Entry(params_frame, textvariable=self.num_samples, width=10).pack(side='left', padx=(5,20))
        
        ttk.Label(params_frame, text="It√©rations d'entra√Ænement :").pack(side='left')
        ttk.Entry(params_frame, textvariable=self.n_iterations, width=10).pack(side='left', padx=5)
        
        # Chemin de sortie du mod√®le
        output_frame = ttk.Frame(training_frame)
        output_frame.pack(fill='x', pady=10)
        
        ttk.Label(output_frame, text="Dossier de sauvegarde du mod√®le :").pack(anchor='w')
        
        output_select_frame = ttk.Frame(output_frame)
        output_select_frame.pack(fill='x', pady=5)
        
        self.output_entry = ttk.Entry(output_select_frame, textvariable=self.output_model_path, 
                 state='readonly', width=50)
        self.output_entry.pack(side='left', fill='x', expand=True)
        ttk.Button(output_select_frame, text="Choisir dossier", 
                  command=self.select_output_path).pack(side='right', padx=(5,0))
        
        # Boutons d'action
        buttons_frame = ttk.Frame(training_frame)
        buttons_frame.pack(fill='x', pady=10)
        
        self.generate_button = ttk.Button(buttons_frame, text="1. G√©n√©rer donn√©es", 
                  command=self.generate_data)
        self.generate_button.pack(side='left', padx=(0,10))
        
        self.train_button = ttk.Button(buttons_frame, text="2. Lancer fine-tuning", 
                  command=self.start_training)
        self.train_button.pack(side='left')
        
        # Barre de progression
        self.progress = ttk.Progressbar(self.window, mode='determinate')
        self.progress.pack(fill='x', padx=20, pady=5)
        
        # Statut
        status_frame = ttk.Frame(self.window)
        status_frame.pack(fill='x', padx=20, pady=10)
        
        ttk.Label(status_frame, text="Statut :").pack(side='left')
        ttk.Label(status_frame, textvariable=self.status_text, 
                 foreground='blue').pack(side='left', padx=(5,0))
        
        # Instructions
        help_frame = ttk.LabelFrame(self.window, text="Instructions", padding=10)
        help_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        final_help = """1. Chargez votre fichier annuaire (noms, organisations, ou lieux)
2. Chargez vos phrases contextuelles avec placeholders
3. G√©n√©rez les donn√©es d'entra√Ænement (commencez petit : 100 exemples)
4. Lancez le fine-tuning (commencez avec 10 it√©rations)
5. Le mod√®le sera sauvegard√© dans le dossier choisi"""
        
        ttk.Label(help_frame, text=final_help, justify='left').pack()
    
    def check_download_model(self):
        """V√©rifie et t√©l√©charge le mod√®le si n√©cessaire"""
        model_name = self.base_model.get()
        
        try:
            self.status_text.set(f"V√©rification du mod√®le {model_name}...")
            self.window.update()
            
            # Test de chargement
            import spacy
            try:
                nlp = spacy.load(model_name)
                self.status_text.set(f"‚úÖ Mod√®le {model_name} disponible")
                messagebox.showinfo("Succ√®s", f"Le mod√®le {model_name} est d√©j√† install√© et fonctionnel !")
                
                # Initialisation du fine-tuner avec le bon mod√®le
                self.fine_tuner = SpacyFineTuner(model_name)
                
            except OSError:
                # Mod√®le non trouv√©, proposer le t√©l√©chargement
                response = messagebox.askyesno("Mod√®le manquant", 
                    f"Le mod√®le {model_name} n'est pas install√©.\n\n"
                    f"Voulez-vous le t√©l√©charger maintenant ?\n\n"
                    f"Note : La taille varie selon le mod√®le :\n"
                    f"‚Ä¢ sm : ~50 MB\n"
                    f"‚Ä¢ md : ~45 MB\n" 
                    f"‚Ä¢ lg : ~560 MB")
                
                if response:
                    self.download_model(model_name)
                else:
                    self.status_text.set("T√©l√©chargement annul√©")
                    
        except Exception as e:
            error_msg = f"Erreur lors de la v√©rification : {str(e)}"
            self.status_text.set(error_msg)
            messagebox.showerror("Erreur", error_msg)
    
    def download_model(self, model_name):
        """T√©l√©charge un mod√®le spaCy"""
        try:
            import subprocess
            import sys
            
            self.status_text.set(f"T√©l√©chargement de {model_name}...")
            self.window.update()
            
            # Commande de t√©l√©chargement
            cmd = [sys.executable, "-m", "spacy", "download", model_name]
            
            # Ex√©cution avec capture de sortie
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                self.status_text.set(f"‚úÖ {model_name} t√©l√©charg√© avec succ√®s")
                messagebox.showinfo("Succ√®s", f"Le mod√®le {model_name} a √©t√© t√©l√©charg√© et install√© !")
                
                # Initialisation du fine-tuner
                self.fine_tuner = SpacyFineTuner(model_name)
                
            else:
                error_msg = f"Erreur de t√©l√©chargement : {result.stderr}"
                self.status_text.set("Erreur de t√©l√©chargement")
                messagebox.showerror("Erreur", error_msg)
                
        except subprocess.TimeoutExpired:
            self.status_text.set("T√©l√©chargement interrompu (timeout)")
            messagebox.showerror("Erreur", "Le t√©l√©chargement a pris trop de temps et a √©t√© interrompu.")
            
        except Exception as e:
            error_msg = f"Erreur lors du t√©l√©chargement : {str(e)}"
            self.status_text.set(error_msg)
            messagebox.showerror("Erreur", error_msg)
        try:
            file_path = filedialog.askopenfilename(
                title="Fichier annuaire",
                filetypes=[("Fichiers texte", "*.txt"), ("Tous", "*.*")]
            )
            if file_path:
                self.directory_file.set(file_path)
                print(f"üìÅ Fichier annuaire s√©lectionn√© : {file_path}")
        except Exception as e:
            print(f"‚ùå Erreur s√©lection fichier annuaire : {e}")
            messagebox.showerror("Erreur", f"Erreur lors de la s√©lection : {str(e)}")
    
    def select_context_file(self):
        try:
            file_path = filedialog.askopenfilename(
                title="Fichier phrases contextuelles",
                filetypes=[("Fichiers texte", "*.txt"), ("Tous", "*.*")]
            )
            if file_path:
                self.context_file.set(file_path)
                print(f"üìÅ Fichier contextes s√©lectionn√© : {file_path}")
        except Exception as e:
            print(f"‚ùå Erreur s√©lection fichier contextes : {e}")
            messagebox.showerror("Erreur", f"Erreur lors de la s√©lection : {str(e)}")
    
    def select_output_path(self):
        try:
            folder_path = filedialog.askdirectory(title="Dossier pour le mod√®le fine-tun√©")
            if folder_path:
                model_path = Path(folder_path) / "modele_finetuned"
                self.output_model_path.set(str(model_path))
                print(f"üìÅ Dossier de sortie s√©lectionn√© : {model_path}")
        except Exception as e:
            print(f"‚ùå Erreur s√©lection dossier sortie : {e}")
            messagebox.showerror("Erreur", f"Erreur lors de la s√©lection : {str(e)}")
    
    def load_directory(self):
        if not self.directory_file.get():
            messagebox.showerror("Erreur", "S√©lectionnez d'abord un fichier annuaire")
            return
        
        try:
            print(f"üîÑ Chargement de l'annuaire : {self.directory_file.get()}")
            count = self.data_generator.load_directory_file(
                self.directory_file.get(), 
                self.entity_type.get()
            )
            
            status_msg = f"Annuaire charg√© : {count} entr√©es ({self.entity_type.get()})"
            self.status_text.set(status_msg)
            print(f"‚úÖ {status_msg}")
            
            messagebox.showinfo("Succ√®s", f"{count} entr√©es charg√©es avec succ√®s")
            
        except Exception as e:
            error_msg = f"Erreur lors du chargement de l'annuaire : {str(e)}"
            print(f"‚ùå {error_msg}")
            self.status_text.set("Erreur lors du chargement")
            messagebox.showerror("Erreur", error_msg)
    
    def load_contexts(self):
        if not self.context_file.get():
            messagebox.showerror("Erreur", "S√©lectionnez d'abord un fichier de contextes")
            return
        
        try:
            print(f"üîÑ Chargement des contextes : {self.context_file.get()}")
            count = self.data_generator.load_context_templates(self.context_file.get())
            
            status_msg = f"Contextes charg√©s : {count} templates"
            self.status_text.set(status_msg)
            print(f"‚úÖ {status_msg}")
            
            messagebox.showinfo("Succ√®s", f"{count} templates charg√©s avec succ√®s")
            
        except Exception as e:
            error_msg = f"Erreur lors du chargement des contextes : {str(e)}"
            print(f"‚ùå {error_msg}")
            self.status_text.set("Erreur lors du chargement")
            messagebox.showerror("Erreur", error_msg)
    
    def generate_data(self):
        """G√©n√©ration des donn√©es - version simplifi√©e sans threading"""
        try:
            if not self.data_generator.context_templates:
                messagebox.showerror("Erreur", "Chargez d'abord les contextes")
                return
            
            if not any([self.data_generator.person_names, 
                       self.data_generator.org_names, 
                       self.data_generator.location_names]):
                messagebox.showerror("Erreur", "Chargez d'abord un annuaire")
                return
            
            self.generate_button.config(state='disabled')
            self.status_text.set("G√©n√©ration des donn√©es en cours...")
            self.window.update()
            
            # G√©n√©ration directe (sans thread pour √©viter les probl√®mes)
            training_data = self.data_generator.generate_training_data(self.num_samples.get())
            
            self.status_text.set(f"Donn√©es g√©n√©r√©es : {len(training_data)} exemples")
            self.generate_button.config(state='normal')
            
            messagebox.showinfo("Succ√®s", f"{len(training_data)} exemples d'entra√Ænement g√©n√©r√©s")
            
            # Sauvegarde optionnelle
            if self.output_model_path.get():
                try:
                    save_path = Path(self.output_model_path.get()).parent / "training_data.json"
                    save_path.parent.mkdir(parents=True, exist_ok=True)
                    self.data_generator.save_training_data(str(save_path))
                    print(f"Donn√©es sauvegard√©es dans : {save_path}")
                except Exception as save_error:
                    print(f"Erreur sauvegarde optionnelle: {save_error}")
            
        except Exception as e:
            self.generate_button.config(state='normal')
            self.status_text.set("Erreur lors de la g√©n√©ration")
            messagebox.showerror("Erreur", f"Erreur lors de la g√©n√©ration : {str(e)}")
    
    def start_training(self):
        """D√©marrage de l'entra√Ænement - version simplifi√©e"""
        if not self.data_generator.generated_data:
            messagebox.showerror("Erreur", "G√©n√©rez d'abord les donn√©es d'entra√Ænement")
            return
        
        if not self.output_model_path.get():
            messagebox.showerror("Erreur", "Choisissez un dossier de sauvegarde")
            return
        
        if not self.fine_tuner:
            messagebox.showerror("Erreur", "V√©rifiez d'abord le mod√®le de base")
            return
        
        # D√©sactivation des boutons
        self.generate_button.config(state='disabled')
        self.train_button.config(state='disabled')
        
        try:
            # Pr√©paration
            self.status_text.set(f"Pr√©paration du mod√®le {self.base_model.get()}...")
            self.progress.config(value=10)
            self.window.update()
            
            self.fine_tuner.load_base_model()
            
            # Pr√©paration des donn√©es
            self.status_text.set("Pr√©paration des donn√©es...")
            self.progress.config(value=20)
            self.window.update()
            
            self.fine_tuner.prepare_training_data(self.data_generator.generated_data)
            
            # Callback pour la progression
            def update_progress(iteration, total):
                progress = 20 + int((iteration / total) * 60)  # 20-80%
                self.progress.config(value=progress)
                self.status_text.set(f"Entra√Ænement {self.base_model.get()}... {iteration+1}/{total}")
                self.window.update()
            
            # Entra√Ænement
            self.status_text.set("Fine-tuning en cours...")
            self.progress.config(value=25)
            self.window.update()
            
            self.fine_tuner.fine_tune(
                n_iter=self.n_iterations.get(),
                progress_callback=update_progress
            )
            
            # Sauvegarde
            self.status_text.set("Sauvegarde du mod√®le...")
            self.progress.config(value=90)
            self.window.update()
            
            self.fine_tuner.save_model(self.output_model_path.get())
            
            # Succ√®s
            self.status_text.set("Termin√© avec succ√®s !")
            self.progress.config(value=100)
            
            success_msg = f"""Fine-tuning termin√© avec succ√®s !

Mod√®le de base utilis√© : {self.base_model.get()}
Mod√®le sauvegard√© dans :
{self.output_model_path.get()}

Pour l'utiliser dans l'application principale :
1. Retournez √† l'onglet "Pseudonymisation"
2. S√©lectionnez "Mod√®le personnalis√©"
3. Parcourez vers ce dossier"""
            
            messagebox.showinfo("Succ√®s", success_msg)
            
        except Exception as e:
            self.status_text.set("Erreur durant l'entra√Ænement")
            self.progress.config(value=0)
            error_msg = f"Erreur durant l'entra√Ænement :\n{str(e)}\n\nV√©rifiez que :\n- Le mod√®le de base {self.base_model.get()} est install√©\n- Vous avez assez d'espace disque\n- Les fichiers d'entr√©e sont corrects"
            messagebox.showerror("Erreur", error_msg)
        
        finally:
            # R√©activation des boutons
            self.generate_button.config(state='normal')
            self.train_button.config(state='normal')

def main():
    """Test de l'interface de fine-tuning"""
    root = tk.Tk()
    root.withdraw()  # Cache la fen√™tre principale
    app = FineTuningGUI()
    app.window.mainloop()

if __name__ == "__main__":
    main()